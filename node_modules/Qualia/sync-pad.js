// Generated by CoffeeScript 1.9.2
(function() {
  var fs, id, pads, save, serch;

  fs = require('fs');

  pads = [];

  id = 0;

  fs.exists('./sync-pad.json', function(exist) {
    var json, ref;
    if (exist) {
      json = fs.readFileSync('./sync-pad.json', 'utf-8');
      pads = JSON.parse(json);
      return id = (ref = pads[pads.length - 1]) != null ? ref.id : void 0;
    } else {
      return console.log('Not found sync-pad data file.');
    }
  });

  save = function() {
    return fs.writeFileSync('./sync-pad.json', JSON.stringify(pads, null, '  '));
  };

  setInterval(function() {
    return save();
  }, 30000);

  serch = function(id) {
    var end, index, start;
    start = 0;
    end = pads.length;
    index = null;
    while (true) {
      index = Math.floor((start + end) / 2);
      if (pads[index].id === id) {
        return index;
      }
      if (start === end || end < start) {
        console.log('delete[pad]: fail');
        break;
      } else if (pads[index].id < id) {
        start = index + 1;
      } else if (pads[index].id > id) {
        end = index - 1;
      }
    }
  };

  module.exports = function(io) {
    io.sockets.on('connection', function(socket) {
      socket.emit('message', {
        type: 'pads',
        pads: pads
      });
      return socket.on('message', function(data) {
        var index, pad;
        console.log(data);
        switch (data.type) {
          case 'create':
            console.log('PAD[:CREATE]');
            data.id = ++id;
            pads.push({
              name: data.name,
              title: data.title,
              text: '',
              id: data.id
            });
            save();
            socket.broadcast.emit('message', {
              type: 'create',
              pad: data
            });
            socket.emit('message', {
              type: 'create',
              pad: data
            });
            break;
          case 'update':
            index = serch(data.pad.id);
            pads[index] = data.pad;
            socket.broadcast.emit('message', {
              type: 'update',
              pad: pads[index]
            });
            break;
          case 'delete':
            index = serch(data.id);
            pad = pads[index];
            pads.splice(index, 1);
            socket.emit('message', {
              type: 'delete',
              pad: pad
            });
            socket.broadcast.emit('message', {
              type: 'delete',
              pad: pad
            });
            save();
            break;
        }
      });
    });
    return io;
  };

}).call(this);

//# sourceMappingURL=sync-pad.js.map
