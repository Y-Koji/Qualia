
http = require 'http'
url = require 'url'
path = require 'path'
connect = require 'connect'
compression = require 'compression'
bodyParser = require 'body-parser'
multiparty = require 'multiparty'
fs = require 'fs'
mkdirp = require 'mkdirp'
rmdir = require 'rmdir'
exec = require('child_process').exec

module.exports.set = (app) ->
	write_head = (res, code) ->
		res.writeHead code,
			'Content-Type': 'application/json; charset=utf-8'

	app.use '/api/upload.json', (req, res, next) ->
		if req.method.toLowerCase() is 'post'
			form = new multiparty.Form()
			form.parse req, (err, fields, files) ->
				if not fields?.filename?
					write_head res, 400
					return res.end JSON.stringify({error: 'Not defined [filename] field.'})
				if not fields?.path
					write_head res, 400
					return res.end JSON.stringify({error: 'Not defined [path] field.'})
				from = files?.file[0]?.path
				to = path.join(process.cwd() ,'/htdocs/', fields.path[0]) + decodeURIComponent(fields.filename)
				console.log 'UPLOAD-FILE: ' + decodeURIComponent(fields.filename)
				console.log 'FROM: ' + from
				console.log 'TO: ' + to
				fs.rename from, to, (err) ->
					if err?
						console.log err
						write_head res, 505
						return res.end JSON.stringify({err: 'Server error.'})
					else
						write_head res, 200
						res.end JSON.stringify({success: fields.filename + ' upload success.'})
		else
			res.writeHead 400
			res.end()
	.use '/api/ls.json', (req, res, next) ->
		if req.method.toLowerCase() is 'get'
			if req.query.path
				_path = path.join process.cwd(), '/htdocs/', req.query.path
				fs.stat _path, (err, stats) ->
					if err
						write_head res, 500
						res.end JSON.stringify({status: false, message: 'Not found this path.'})
					else
						if stats.isDirectory()
							console.log 'READDIR: ' + _path
							fs.readdir _path, (err, files) ->
								if err
									write_head res, 500
									res.end JSON.stringify({status: false, message: 'Server internal error.'})
								else
									r_files = []
									r_dirs = []
									for file in files
										if (stat = fs.statSync(path.join(_path, file))).isFile()
											r_files.push
												name: file
												stat: stat
										else
											r_dirs.push
												name: file
												stat: stat
									write_head res, 200
									json = JSON.stringify
										status: true
										files: r_files
										dirs: r_dirs
									res.end json
						else
							write_head res, 200
							res.end JSON.stringify(stats)
			else
				write_head res, 400
				res.end JSON.stringify({status: false, message: 'Not defined [path] param.'})
		else
			write_head res, 400
			res.end JSON.stringify({status: false, message: 'Bad Request.'})
	.use '/api/mkdir.json', (req, res, next) ->
		if (req.method is 'POST' or req.method is 'post') and req.body.dir
			_dir = path.join process.cwd(), '/htdocs/', req.body.dir
			console.log 'MKDIR: ' + _dir
			mkdirp.sync _dir
			write_head res, 200
			res.end JSON.stringify({status: true, path: _dir })
		else
			write_head res, 400
			res.end JSON.stringify({status: false, message: 'Bad Request.'})
	.use '/api/unlink.json', (req, res, next) ->
		if (req.method is 'POST' or req.method is 'post') and req.body.path
			_path = path.join process.cwd(), '/htdocs/', req.body.path.replace(/\//g, '\\')
			if fs.existsSync(_path)
				console.log 'unlink: ' + _path
				if fs.statSync(_path).isDirectory()
					rmdir _path, (err, dirs, files) ->
						if err
							res.writeHead 505,
								'Content-Type': 'application/json; charset=utf-8'
							res.end JSON.stringify({status: false})
						else
							write_head res, 200
							json = JSON.stringify
								status: true,
								dirs: dirs
								files: files
							res.end json, 'binary'
				else
					fs.unlink _path, (err) ->
						if err
							write_head res, 500
							res.end JSON.stringify({status: false})
						else
							write_head res, 200
							res.end JSON.stringify({status: true, file: _path })
		else
			write_head res, 400
			res.end '{"error": "Bad Request"}'
	.use '/api/user/icon.json', (req, res, next) ->
		if req.method.toLowerCase() is 'get'
			if req.query.name
				_path = path.join process.cwd(), '/htdocs/icon/', req.query.name
				fs.stat _path + '.png', (err, stats) ->
					if err
						fs.stat _path + '.jpg', (err, stats) ->
							if err
								default_icon_path = path.join process.cwd() + '/htdocs/icon/default.png'
								console.log default_icon_path
								fs.readFile default_icon_path, 'binary', (err, data) ->
									if err
										write_head res, 500
										res.end JSON.stringify({status: false, message: 'Server internal error.'})
									else
										res.writeHead 200, { 'Content-Type': 'image/png' }
										res.end data, 'binary'
							else
								fs.readFile _path + '.jpg', 'binary', (err, data) ->
									if err
										write_head res, 500
										res.end JSON.stringify({status: false, message: 'Server internal error.'})
									else
										res.writeHead 200, { 'Content-Type': 'image/jpeg' }
										res.end data, 'binary'
					else
						fs.readFile _path + '.png', 'binary', (err, data) ->
							if err
								write_head res, 500
								res.end JSON.stringify({status: false, message: 'Server internal error.'})
							else
								res.writeHead 200, { 'Content-Type': 'image/png' }
								res.end data, 'binary'
			else
				write_head res, 400
				res.end JSON.stringify({status: false, message: 'Not defined user name.'})
		else
			write_head res, 400
			res.end JSON.stringify({status: false, message: 'Invalid method.'})
	.use '/api/', (req, res, next) ->
		console.log req.url
		res.writeHead 200,
			'Content-Type': 'application/json; charset=utf-8'
		res.end	JSON.stringify(
			apis:
				upload:
					endpoint: "/api/upload.json"
					type: 'post'
					params:
						path: 'Upload path.'
						dir: 'Upload directory path.'
						data: 'Base64 encoded text strings.'
					worn: "Max file size is 1024MByte"
					description: "File upload api."
				mkdir:
					endpoint: '/api/mkdir.json'
					type: 'post'
					params:
						dir: 'directory name'
					worn: null
					description: 'Create a directory api.'
				unlink:
					endpoint: '/api/unlink.json'
					type: 'post'
					params:
						path: "Unlink file path."
					worn: null
					description: 'Delete the directory or file api'
				ls:
					endpoint: '/api/ls.json'
					type: 'get'
					params:
						path: "Serch path."
					worn: null
					description: 'You get the information of directories and files api.'
		, null, "  ")