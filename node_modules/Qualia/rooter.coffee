
fs = require 'fs'
coffee = require 'coffee-script'

writeHead = (res, type) ->
	switch type
		when 'html'
			return res.writeHead 200,
				'Content-Type': 'text/html; charset=utf-8'
		when 'css'
			return res.writeHead 200,
				'Content-Type': 'text/css; charset=utf-8'
		when 'js'
			return res.writeHead 200,
				'Content-Type': 'text/javascript; charset=utf-8'
		when 'text'
			return res.writeHead 200,
				'Content-Type': 'text/plain'

fileResponse = (res, path) ->
	fs.readFile path, 'binary', (err, data) ->
		if err
			res.end '505 Internal Error'
		else
			console.log path
			if path.match(/^.*\/.*\.(.*)$/)?
				switch path.match(/^.*\/.*\.(.*)$/)[1]
					when 'html'
						writeHead res, 'html'
						break
					when 'htm'
						writeHead res, 'html'
						break
					when 'js'
						writeHead res, 'js'
						break
					when 'coffee'
						writeHead res, 'js'
						data = coffee.compile(data)
					when 'css'
						writeHead res, 'css'
						break
					when 'styl'
						writeHead res, 'text'
						break
					when 'txt'
						writeHead res, 'text'
						break
					when 'c'
						writeHead res, 'text'
						break
					when 'cpp'
						writeHead res, 'text'
						break
					when 'h'
						writeHead res, 'text'
						break
					when 'hpp'
						writeHead res, 'text'
						break
					when 'cs'
						writeHead res, 'text'
						break
					when 'v'
						writeHead res, 'text'
						break
					when 'm'
						writeHead res, 'text'
						break

			res.write data, 'binary'
			res.end()

htmlResponse = (res, html) ->
	res.writeHead 200,
		'Content-Type': 'text/html; charset=utf-8'
		'charset': 'utf-8'
	res.end html

Page =
	explorer: (files) ->
		if fs.existsSync('./htdocs/tools/explorer.html') then fs.readFileSync('./htdocs/tools/explorer.html', 'utf-8')
		else return null

Accebility =
	Dir: 
		Hide: ["script", "style", "chat", "tools"]
		Worn: []
	File:
		Hide: ["app.coffee", "app.js", "app.js.map"]
		Worn: []

module.exports = (res, path) ->
	dir = path = '.' + path
	console.log path

	fs.exists path, (exists) ->
		if exists
			if fs.statSync(path).isFile()
				fileResponse res, path
			else
				path = if path[path.length - 1] == '/' then path else path + '/'
				index_html_path = path + 'index.html'
				fs.exists index_html_path, (exists) ->
					if exists
						fileResponse res, index_html_path
					else
						fs.readdir path, (err, files) ->
							if err then throw err
							injection_html = '      <li><a href="../">../</a></li>\n'
							r_dir = []
							r_file = []
							files.forEach (file) ->
								if path.match((new RegExp(file, 'i'))) then return null
								if fs.statSync(path + file).isFile()
									r_file.push file
								else
									r_dir.push file
							r_dir.forEach (dir) ->
								type = 'dir'
								for hide in Accebility.Dir.Hide
									if dir is hide
										return
								for worn in Accebility.Dir.Worn
									if dir is worn
										type = 'err'
								dir_link = (path + dir).replace './htdocs/', './'
								injection_html += 
									'      <li class="' + type + '"><a href="/' + dir_link + '/">./' + dir + 
									'/</a><button class="unlink" type="button" name="' + dir_link + '">削除</button></li>\n'
							r_file.forEach (file) ->
								type = 'file'
								for hide in Accebility.File.Hide
									if file is hide
										return
								for worn in Accebility.File.Worn
									if file is worn
										type = 'err'
								file_link = (path + file).replace './htdocs/', './'
								injection_html += 
									'      <li class="' + type + '"><a href="/' + file_link + '">' + file +
									'</a><button class="unlink" type="button" name="' + file_link + '" >削除</button></li>\n'
							html = Page.explorer(files)
								.replace('<!-- DIRECTORY INFO -->', injection_html)
								.replace('<!-- TITLE -->', path.replace('./htdocs/', './'))
								.replace('<!-- PATH -->', dir.replace('./htdocs/', './'))
								.replace('/* CURRENT DIRECTORY */', dir)
							htmlResponse res, html
		else
			res.writeHead 404,
				'Content-Type': 'text/html; charset=utf-8'
				'charset': 'utf-8'
			res.end '404 Not Found'
