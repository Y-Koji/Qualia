// Generated by CoffeeScript 1.9.2
(function() {
  var Accebility, Page, coffee, fileResponse, fs, htmlResponse, writeHead;

  fs = require('fs');

  coffee = require('coffee-script');

  writeHead = function(res, type) {
    switch (type) {
      case 'html':
        return res.writeHead(200, {
          'Content-Type': 'text/html; charset=utf-8'
        });
      case 'css':
        return res.writeHead(200, {
          'Content-Type': 'text/css; charset=utf-8'
        });
      case 'js':
        return res.writeHead(200, {
          'Content-Type': 'text/javascript; charset=utf-8'
        });
      case 'text':
        return res.writeHead(200, {
          'Content-Type': 'text/plain'
        });
    }
  };

  fileResponse = function(res, path) {
    return fs.readFile(path, 'binary', function(err, data) {
      if (err) {
        return res.end('505 Internal Error');
      } else {
        console.log(path);
        if (path.match(/^.*\/.*\.(.*)$/) != null) {
          switch (path.match(/^.*\/.*\.(.*)$/)[1]) {
            case 'html':
              writeHead(res, 'html');
              break;
            case 'htm':
              writeHead(res, 'html');
              break;
            case 'js':
              writeHead(res, 'js');
              break;
            case 'coffee':
              writeHead(res, 'js');
              data = coffee.compile(data);
              break;
            case 'css':
              writeHead(res, 'css');
              break;
            case 'styl':
              writeHead(res, 'text');
              break;
            case 'txt':
              writeHead(res, 'text');
              break;
            case 'c':
              writeHead(res, 'text');
              break;
            case 'cpp':
              writeHead(res, 'text');
              break;
            case 'h':
              writeHead(res, 'text');
              break;
            case 'hpp':
              writeHead(res, 'text');
              break;
            case 'cs':
              writeHead(res, 'text');
              break;
            case 'v':
              writeHead(res, 'text');
              break;
            case 'm':
              writeHead(res, 'text');
              break;
          }
        }
        res.write(data, 'binary');
        return res.end();
      }
    });
  };

  htmlResponse = function(res, html) {
    res.writeHead(200, {
      'Content-Type': 'text/html; charset=utf-8',
      'charset': 'utf-8'
    });
    return res.end(html);
  };

  Page = {
    explorer: function(files) {
      if (fs.existsSync('./htdocs/tools/explorer.html')) {
        return fs.readFileSync('./htdocs/tools/explorer.html', 'utf-8');
      } else {
        return null;
      }
    }
  };

  Accebility = {
    Dir: {
      Hide: ["script", "style", "chat", "tools"],
      Worn: []
    },
    File: {
      Hide: ["app.coffee", "app.js", "app.js.map"],
      Worn: []
    }
  };

  module.exports = function(res, path) {
    var dir;
    dir = path = '.' + path;
    console.log(path);
    return fs.exists(path, function(exists) {
      var index_html_path;
      if (exists) {
        if (fs.statSync(path).isFile()) {
          return fileResponse(res, path);
        } else {
          path = path[path.length - 1] === '/' ? path : path + '/';
          index_html_path = path + 'index.html';
          return fs.exists(index_html_path, function(exists) {
            if (exists) {
              return fileResponse(res, index_html_path);
            } else {
              return fs.readdir(path, function(err, files) {
                var html, injection_html, r_dir, r_file;
                if (err) {
                  throw err;
                }
                injection_html = '      <li><a href="../">../</a></li>\n';
                r_dir = [];
                r_file = [];
                files.forEach(function(file) {
                  if (path.match(new RegExp(file, 'i'))) {
                    return null;
                  }
                  if (fs.statSync(path + file).isFile()) {
                    return r_file.push(file);
                  } else {
                    return r_dir.push(file);
                  }
                });
                r_dir.forEach(function(dir) {
                  var dir_link, hide, i, j, len, len1, ref, ref1, type, worn;
                  type = 'dir';
                  ref = Accebility.Dir.Hide;
                  for (i = 0, len = ref.length; i < len; i++) {
                    hide = ref[i];
                    if (dir === hide) {
                      return;
                    }
                  }
                  ref1 = Accebility.Dir.Worn;
                  for (j = 0, len1 = ref1.length; j < len1; j++) {
                    worn = ref1[j];
                    if (dir === worn) {
                      type = 'err';
                    }
                  }
                  dir_link = (path + dir).replace('./htdocs/', './');
                  return injection_html += '      <li class="' + type + '"><a href="/' + dir_link + '/">./' + dir + '/</a><button class="unlink" type="button" name="' + dir_link + '">削除</button></li>\n';
                });
                r_file.forEach(function(file) {
                  var file_link, hide, i, j, len, len1, ref, ref1, type, worn;
                  type = 'file';
                  ref = Accebility.File.Hide;
                  for (i = 0, len = ref.length; i < len; i++) {
                    hide = ref[i];
                    if (file === hide) {
                      return;
                    }
                  }
                  ref1 = Accebility.File.Worn;
                  for (j = 0, len1 = ref1.length; j < len1; j++) {
                    worn = ref1[j];
                    if (file === worn) {
                      type = 'err';
                    }
                  }
                  file_link = (path + file).replace('./htdocs/', './');
                  return injection_html += '      <li class="' + type + '"><a href="/' + file_link + '">' + file + '</a><button class="unlink" type="button" name="' + file_link + '" >削除</button></li>\n';
                });
                html = Page.explorer(files).replace('<!-- DIRECTORY INFO -->', injection_html).replace('<!-- TITLE -->', path.replace('./htdocs/', './')).replace('<!-- PATH -->', dir.replace('./htdocs/', './')).replace('/* CURRENT DIRECTORY */', dir);
                return htmlResponse(res, html);
              });
            }
          });
        }
      } else {
        res.writeHead(404, {
          'Content-Type': 'text/html; charset=utf-8',
          'charset': 'utf-8'
        });
        return res.end('404 Not Found');
      }
    });
  };

}).call(this);

//# sourceMappingURL=rooter.js.map
