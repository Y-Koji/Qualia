// Generated by CoffeeScript 1.9.2
(function() {
  var bodyParser, compression, connect, exec, fs, http, mkdirp, multiparty, path, rmdir, url;

  http = require('http');

  url = require('url');

  path = require('path');

  connect = require('connect');

  compression = require('compression');

  bodyParser = require('body-parser');

  multiparty = require('multiparty');

  fs = require('fs');

  mkdirp = require('mkdirp');

  rmdir = require('rmdir');

  exec = require('child_process').exec;

  module.exports.set = function(app) {
    var write_head;
    write_head = function(res, code) {
      return res.writeHead(code, {
        'Content-Type': 'application/json; charset=utf-8'
      });
    };
    return app.use('/api/upload.json', function(req, res, next) {
      var form;
      if (req.method.toLowerCase() === 'post') {
        form = new multiparty.Form();
        return form.parse(req, function(err, fields, files) {
          var from, ref, to;
          if ((fields != null ? fields.filename : void 0) == null) {
            write_head(res, 400);
            return res.end(JSON.stringify({
              error: 'Not defined [filename] field.'
            }));
          }
          if (!(fields != null ? fields.path : void 0)) {
            write_head(res, 400);
            return res.end(JSON.stringify({
              error: 'Not defined [path] field.'
            }));
          }
          from = files != null ? (ref = files.file[0]) != null ? ref.path : void 0 : void 0;
          to = path.join(process.cwd(), '/htdocs/', fields.path[0]) + decodeURIComponent(fields.filename);
          console.log('UPLOAD-FILE: ' + decodeURIComponent(fields.filename));
          console.log('FROM: ' + from);
          console.log('TO: ' + to);
          return fs.rename(from, to, function(err) {
            if (err != null) {
              console.log(err);
              write_head(res, 505);
              return res.end(JSON.stringify({
                err: 'Server error.'
              }));
            } else {
              write_head(res, 200);
              return res.end(JSON.stringify({
                success: fields.filename + ' upload success.'
              }));
            }
          });
        });
      } else {
        res.writeHead(400);
        return res.end();
      }
    }).use('/api/ls.json', function(req, res, next) {
      var _path;
      if (req.method.toLowerCase() === 'get') {
        if (req.query.path) {
          _path = path.join(process.cwd(), '/htdocs/', req.query.path);
          return fs.stat(_path, function(err, stats) {
            if (err) {
              write_head(res, 500);
              return res.end(JSON.stringify({
                status: false,
                message: 'Not found this path.'
              }));
            } else {
              if (stats.isDirectory()) {
                console.log('READDIR: ' + _path);
                return fs.readdir(_path, function(err, files) {
                  var file, i, json, len, r_dirs, r_files, stat;
                  if (err) {
                    write_head(res, 500);
                    return res.end(JSON.stringify({
                      status: false,
                      message: 'Server internal error.'
                    }));
                  } else {
                    r_files = [];
                    r_dirs = [];
                    for (i = 0, len = files.length; i < len; i++) {
                      file = files[i];
                      if ((stat = fs.statSync(path.join(_path, file))).isFile()) {
                        r_files.push({
                          name: file,
                          stat: stat
                        });
                      } else {
                        r_dirs.push({
                          name: file,
                          stat: stat
                        });
                      }
                    }
                    write_head(res, 200);
                    json = JSON.stringify({
                      status: true,
                      files: r_files,
                      dirs: r_dirs
                    });
                    return res.end(json);
                  }
                });
              } else {
                write_head(res, 200);
                return res.end(JSON.stringify(stats));
              }
            }
          });
        } else {
          write_head(res, 400);
          return res.end(JSON.stringify({
            status: false,
            message: 'Not defined [path] param.'
          }));
        }
      } else {
        write_head(res, 400);
        return res.end(JSON.stringify({
          status: false,
          message: 'Bad Request.'
        }));
      }
    }).use('/api/mkdir.json', function(req, res, next) {
      var _dir;
      if ((req.method === 'POST' || req.method === 'post') && req.body.dir) {
        _dir = path.join(process.cwd(), '/htdocs/', req.body.dir);
        console.log('MKDIR: ' + _dir);
        mkdirp.sync(_dir);
        write_head(res, 200);
        return res.end(JSON.stringify({
          status: true,
          path: _dir
        }));
      } else {
        write_head(res, 400);
        return res.end(JSON.stringify({
          status: false,
          message: 'Bad Request.'
        }));
      }
    }).use('/api/unlink.json', function(req, res, next) {
      var _path;
      if ((req.method === 'POST' || req.method === 'post') && req.body.path) {
        _path = path.join(process.cwd(), '/htdocs/', req.body.path.replace(/\//g, '\\'));
        if (fs.existsSync(_path)) {
          console.log('unlink: ' + _path);
          if (fs.statSync(_path).isDirectory()) {
            return rmdir(_path, function(err, dirs, files) {
              var json;
              if (err) {
                res.writeHead(505, {
                  'Content-Type': 'application/json; charset=utf-8'
                });
                return res.end(JSON.stringify({
                  status: false
                }));
              } else {
                write_head(res, 200);
                json = JSON.stringify({
                  status: true,
                  dirs: dirs,
                  files: files
                });
                return res.end(json, 'binary');
              }
            });
          } else {
            return fs.unlink(_path, function(err) {
              if (err) {
                write_head(res, 500);
                return res.end(JSON.stringify({
                  status: false
                }));
              } else {
                write_head(res, 200);
                return res.end(JSON.stringify({
                  status: true,
                  file: _path
                }));
              }
            });
          }
        }
      } else {
        write_head(res, 400);
        return res.end('{"error": "Bad Request"}');
      }
    }).use('/api/user/icon.json', function(req, res, next) {
      var _path;
      if (req.method.toLowerCase() === 'get') {
        if (req.query.name) {
          _path = path.join(process.cwd(), '/htdocs/icon/', req.query.name);
          return fs.stat(_path + '.png', function(err, stats) {
            if (err) {
              return fs.stat(_path + '.jpg', function(err, stats) {
                var default_icon_path;
                if (err) {
                  default_icon_path = path.join(process.cwd() + '/htdocs/icon/default.png');
                  console.log(default_icon_path);
                  return fs.readFile(default_icon_path, 'binary', function(err, data) {
                    if (err) {
                      write_head(res, 500);
                      return res.end(JSON.stringify({
                        status: false,
                        message: 'Server internal error.'
                      }));
                    } else {
                      res.writeHead(200, {
                        'Content-Type': 'image/png'
                      });
                      return res.end(data, 'binary');
                    }
                  });
                } else {
                  return fs.readFile(_path + '.jpg', 'binary', function(err, data) {
                    if (err) {
                      write_head(res, 500);
                      return res.end(JSON.stringify({
                        status: false,
                        message: 'Server internal error.'
                      }));
                    } else {
                      res.writeHead(200, {
                        'Content-Type': 'image/jpeg'
                      });
                      return res.end(data, 'binary');
                    }
                  });
                }
              });
            } else {
              return fs.readFile(_path + '.png', 'binary', function(err, data) {
                if (err) {
                  write_head(res, 500);
                  return res.end(JSON.stringify({
                    status: false,
                    message: 'Server internal error.'
                  }));
                } else {
                  res.writeHead(200, {
                    'Content-Type': 'image/png'
                  });
                  return res.end(data, 'binary');
                }
              });
            }
          });
        } else {
          write_head(res, 400);
          return res.end(JSON.stringify({
            status: false,
            message: 'Not defined user name.'
          }));
        }
      } else {
        write_head(res, 400);
        return res.end(JSON.stringify({
          status: false,
          message: 'Invalid method.'
        }));
      }
    }).use('/api/', function(req, res, next) {
      console.log(req.url);
      res.writeHead(200, {
        'Content-Type': 'application/json; charset=utf-8'
      });
      return res.end(JSON.stringify({
        apis: {
          upload: {
            endpoint: "/api/upload.json",
            type: 'post',
            params: {
              path: 'Upload path.',
              dir: 'Upload directory path.',
              data: 'Base64 encoded text strings.'
            },
            worn: "Max file size is 1024MByte",
            description: "File upload api."
          },
          mkdir: {
            endpoint: '/api/mkdir.json',
            type: 'post',
            params: {
              dir: 'directory name'
            },
            worn: null,
            description: 'Create a directory api.'
          },
          unlink: {
            endpoint: '/api/unlink.json',
            type: 'post',
            params: {
              path: "Unlink file path."
            },
            worn: null,
            description: 'Delete the directory or file api'
          },
          ls: {
            endpoint: '/api/ls.json',
            type: 'get',
            params: {
              path: "Serch path."
            },
            worn: null,
            description: 'You get the information of directories and files api.'
          }
        }
      }, null, "  "));
    });
  };

}).call(this);

//# sourceMappingURL=api.js.map
