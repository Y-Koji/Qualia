
fs = require 'fs'

pads = []
id = 0

fs.exists './sync-pad.json', (exist) ->
	if exist
		json = fs.readFileSync './sync-pad.json', 'utf-8'
		pads = JSON.parse json
		id = pads[pads.length - 1]?.id
	else
		console.log 'Not found sync-pad data file.'

save = ->
	fs.writeFileSync './sync-pad.json', JSON.stringify(pads, null, '  ')

setInterval ->
	save()
, 30000

serch = (id) ->
	start = 0
	end = pads.length
	index = null
	while true
		index = Math.floor((start + end) / 2)
		if pads[index].id is id
			return index
		if start is end or end < start
			console.log 'delete[pad]: fail'
			break
		else if pads[index].id < id
			start = index + 1
		else if pads[index].id > id
			end = index - 1

module.exports = (io) ->
	io.sockets.on 'connection', (socket) ->
		socket.emit 'message',
			type: 'pads'
			pads: pads
		socket.on 'message', (data) ->
			console.log data
			switch data.type
				when 'create'
					console.log 'PAD[:CREATE]'
					data.id = ++id
					pads.push
						name: data.name
						title: data.title
						text: ''
						id: data.id
					save()
					socket.broadcast.emit 'message',
						type: 'create'
						pad: data
					socket.emit 'message',
						type: 'create'
						pad: data
					break
				when 'update'
					index = serch data.pad.id
					pads[index] = data.pad
					socket.broadcast.emit 'message',
						type: 'update'
						pad: pads[index]
					break
				when 'delete'
					index = serch data.id
					pad = pads[index]
					pads.splice index, 1
					socket.emit 'message',
						type: 'delete'
						pad: pad
					socket.broadcast.emit 'message',
						type: 'delete'
						pad: pad
					save()
					break

	return io;
