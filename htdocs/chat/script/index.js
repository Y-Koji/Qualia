// Generated by CoffeeScript 1.9.2
(function() {
  var date_converter, htmlspecialchars, userAgent;

  qualia.user = localStorage.user ? JSON.parse(localStorage.user) : {
    name: '',
    color: '#da5483'
  };

  userAgent = window.navigator.userAgent.toLowerCase();

  if (userAgent.indexOf("msie") !== -1) {
    alert('IE はだぁ～め！！！');
    location.href = '/';
  }

  htmlspecialchars = function(html) {
    return html.replace(/<a href="(.*)" .*<\/a>/g, '$1').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(https?:\/\/[^$ \n<>]+)/g, '<a href="$1" target="_blank">$1</a>');
  };

  date_converter = function(date) {
    var now, offset;
    if (!date) {
      return '';
    }
    date = new Date(date);
    now = new Date();
    offset = Math.floor((now - date) / 1000);
    if (offset < 60) {
      return offset + '秒前';
    } else if (offset < (60 * 60)) {
      return Math.floor(offset / 60) + '分前';
    } else if (offset < (60 * 60 * 24)) {
      return Math.floor(offset / (60 * 60)) + '時間前';
    } else {
      return Math.floor(offset / (60 * 60 * 24)) + '日前';
    }
  };

  $(function() {
    qualia.set_background_function('body');
    (function() {
      var ViewModel;
      ViewModel = (function() {
        function ViewModel() {
          var self;
          self = this;
          this.timeline = ko.observableArray([]);
          this.login = {
            users: ko.observableArray([])
          };
          this.uploads = ko.observableArray([]);
          this.postform = {
            name: ko.observable(qualia.user.name),
            text: ko.observable(''),
            color: ko.observable(qualia.user.color),
            submit: function(event) {
              return event.returnValue = false;
            },
            update: function() {
              var name;
              if (self.postform.name().split(' ').join('') === '') {
                name = '';
                while ((name = prompt('名前をいれてください').split(' ').join('')) === '' || !name) {}
                self.postform.name(name);
                self.postform.update();
              }
              console.log(this.postform);
              qualia.user.name = self.postform.name();
              qualia.user.color = self.postform.color();
              return localStorage.user = JSON.stringify(qualia.user);
            }
          };
          if (this.postform.name().split(' ').join('') === '') {
            setTimeout(function() {
              var name;
              name = '';
              while ((name = prompt('名前をいれてください').split(' ').join('')) === '' || !name) {}
              self.postform.name(name);
              self.postform.update();
              return alert('名前は投稿フォームでいつでも変更できます！');
            }, 1000);
          }
        }

        ViewModel.prototype.get_post = function(id, name, text, color, date, reply_submit, delete_request, reply_target) {
          var post;
          post = {
            name: name,
            text: text,
            date: ko.observable(date_converter(date)),
            color: color,
            id: id,
            delete_request: function() {
              return typeof delete_request === "function" ? delete_request(id) : void 0;
            },
            reply_text: '',
            reply_submit: function(event) {
              if (typeof reply_submit === "function") {
                reply_submit({
                  message: post.reply_text,
                  to: id
                });
              }
              return event.returnValue = false;
            },
            reply_visible: reply_target ? 'block' : 'none',
            target: {
              name: (reply_target != null ? reply_target.name : void 0) ? reply_target.name : 'default',
              text: (reply_target != null ? reply_target.text : void 0) ? reply_target.text : '',
              color: (reply_target != null ? reply_target.color : void 0) ? reply_target.color : '#FFF'
            }
          };
          setInterval(function() {
            return post.date(date_converter(date));
          }, 1000);
          return post;
        };

        ViewModel.prototype.add_post = function(post) {
          this.timeline.splice(0, 0, post);
          if (!is_focus) {
            return WebNotify(post.name, post.text, '/api/user/icon.json?name=' + post.name, 5000);
          }
        };

        return ViewModel;

      })();
      window.VM = new ViewModel();
      return ko.applyBindings(VM);
    }).call(this);
    (function() {
      var event_offset;
      event_offset = 0;
      $('html').on('dragenter', function(event) {
        if (event_offset === 0) {
          $('main div#upload-area').animate({
            'width': '500px',
            'height': '300px',
            'border': '2px solid transparent',
            duration: 'slow'
          });
        }
        return event_offset++;
      }).on('dragleave', function(event) {
        if (event_offset === 1) {
          $('main div#upload-area').animate({
            'width': '0',
            'height': '0',
            'border': 'none',
            duration: 'slow'
          });
        }
        return event_offset--;
      }).on('drop', function(event) {
        if (event_offset === 1) {
          $('main div#upload-area').animate({
            'width': '0',
            'height': '0',
            'border': 'none',
            duration: 'slow'
          });
        }
        return event_offset = 0;
      });
      return $('main div#upload-area span').on('dragenter', function(event) {
        return $(this).css('background', 'rgba(255, 255, 255, .3)');
      }).on('dragleave', function(event) {
        return $(this).css('background', '');
      }).on('drop', function(event) {
        var element, file, files, i, len, name, results, type;
        event.preventDefault();
        event.stopPropagation();
        element = $(this);
        element.css('background', '');
        element.parent().animate({
          'width': '0',
          'height': '0',
          'border': 'none',
          duration: 'slow'
        });
        event_offset--;
        files = event.originalEvent.dataTransfer.files;
        results = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          type = element.attr('id');
          switch (type) {
            case 'icon':
              if (file.name.toLowerCase().match(/^.*\.(jpg|png)$/)) {
                name = $('main form#post-form > input[type=text]').val();
                qualia.upload(file, name + '.png', 'icon\\', function() {
                  return location.href = location.href;
                });
              } else {
                alert('JPG/PNG形式しかアイコンに設定できません!!');
              }
              break;
            case 'file':
              (function() {
                var obj, progress;
                obj = {
                  filename: file.name,
                  status: ko.observable(0)
                };
                VM.uploads.push(obj);
                progress = function(status) {
                  obj.status(status);
                  console.log(status);
                  if (status === 100) {
                    return VM.uploads.remove(obj);
                  }
                };
                return qualia.upload(file, file.name, 'chat\\file\\', progress, function() {
                  var url;
                  url = location.href + 'file/' + encodeURIComponent(file.name);
                  switch (url.replace(/.*\.(.*)$/, '$1')) {
                    case 'jpg':
                      send_easy('img:' + url);
                      break;
                    case 'png':
                      send_easy('img:' + url);
                      break;
                    case 'gif':
                      return send_easy('img:' + url);
                    default:
                      return send_easy(url);
                  }
                });
              }).call(this);
              break;
          }
          if (type === 'icon') {
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
    }).call(this);
    (function() {
      window.is_focus = true;
      $(window).on('blur', function() {
        return window.is_focus = false;
      });
      return $(window).on('focus', function() {
        return window.is_focus = true;
      });
    }).call(this);
    (function() {
      var socket;
      socket = io.connect(location.href.replace(/(https?:\/\/[^\/]*)\/.*\//, '$1:3000'));
      return socket.on('connect', function() {
        socket.emit('connected', {
          name: VM.postform.name()
        });
        socket.on('message', function(data) {
          var delete_request, post, reply_submit;
          switch (data.type) {
            case 'login':
              WebNotify('ログイン情報', '「' + data.name + '」さんがログインしました', '/api/user/icon.json?name=' + data.name, 5000);
              VM.login.users.push({
                name: data.name,
                logout: function() {
                  return socket.emit('message', {
                    type: 'force-logout',
                    name: data.name,
                    src_name: VM.postform.name()
                  });
                }
              });
              break;
            case 'logout':
              console.log('LOGOUT: ' + data.name);
              WebNotify('ログイン情報', '「' + data.name + '」さんがログアウトしました', '/api/user/icon.json?name=' + data.name, 5000);
              $(document.querySelector('.user.' + data.name)).remove();
              break;
            case 'force-logout-request':
              socket.close();
              document.write('通知: ' + data.src_name + ' さんによって強制ログアウトされました');
              break;
            case 'send':
              reply_submit = function(data) {
                var color, name;
                name = VM.postform.name();
                color = VM.postform.color();
                return send(name, data.message, color, 'reply', data);
              };
              delete_request = function(id) {
                return send(null, null, null, 'delete', {
                  id: id
                });
              };
              post = VM.get_post(data.id, data.name, data.text, data.color, data.date, reply_submit, delete_request);
              VM.add_post(post);
              break;
            case 'file':
              reply_submit = function(data) {
                var color, name;
                name = VM.postform.name();
                color = VM.postform.color();
                return send(name, data.message, color, 'reply', {
                  target: data.target
                });
              };
              delete_request = function(id) {
                return send(null, null, null, 'delete', {
                  id: id
                });
              };
              post = VM.get_post(data.id, data.name, '<a href="./file/' + data.data.filename + '">' + data.data.filename + '</a>', data.color, data.date, reply_submit, delete_request);
              VM.add_post(post);
              break;
            case 'reply':
              reply_submit = function(data) {
                var color, name;
                name = VM.postform.name();
                color = VM.postform.color();
                return send(name, data.message, color, 'reply', data);
              };
              delete_request = function(id) {
                return send(null, null, null, 'delete', {
                  id: id
                });
              };
              post = VM.get_post(data.id, data.name, data.text, data.color, data.date, reply_submit, delete_request, {
                name: data.to.name,
                text: data.to.text,
                color: 'rgb(51, 85, 255)'
              });
              VM.add_post(post);
              break;
            case 'delete':
              console.log(data.status);
              $('#' + data.id).css('min-height', '0').css('background', '#ff3257').children('button').remove();
              return $('#' + data.id).animate({
                'height': '0'
              }, 1000).fadeOut().queue(function() {
                return $(this).remove();
              });
          }
        });
        window.send = function(name, text, color, type, data) {
          if (name != null) {
            name = htmlspecialchars(name);
          }
          if (text != null) {
            if (0 === text.indexOf('pre:')) {
              text = '<pre>' + text.replace(/pre:/, '') + '</pre>';
            } else if (text.match(/data:image\//)) {

            } else if (text.match(/^img:(.*)/)) {
              text = text.replace(/^img:(.*)/g, '<img src="$1" width="auto" height="auto" />');
            } else {
              if (text.match(/code:.*/)) {
                text = text.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(.*)"(.*)"(.*)/g, '$1<span style="color: #1C9E54;">"$2"</span>$3').replace(/code:([\s\S]*)/, '<pre style="font-family: consolas; font-style: italic; font-size: .8em;">$1</pre>').replace(/(for )/g, '<span style="color: #FF2DA4;">for </span>').replace(/(while )/g, '<span style="color: #FF2DA4;">while </span>').replace(/(if )/g, '<span style="color: #FF2DA4;">if </span>').replace(/(else )/g, '<span style="color: #FF2DA4;">else </span>').replace(/(switch )/g, '<span style="color: #FF2DA4;">switch </span>').replace(/(case )/g, '<span style="color: #FF2DA4;">case </span>').replace(/(default:)/g, '<span style="color: #FF2DA4;">default</span>:').replace(/(break;)/g, '<span style="color: #FF2DA4;">break</span>;').replace(/(continue )/g, '<span style="color: #FF2DA4;">continue </span>').replace(/(return )/g, '<span style="color: #FF2DA4;">return </span>').replace(/(assign )/g, '<span style="color: #FF2DA4;">assign </span>').replace(/(posedge )/g, '<span style="color: #FF2DA4;">posedge </span>').replace(/(negedge )/g, '<span style="color: #FF2DA4;">negedge </span>').replace(/(void )/g, '<span style="color: #2DA8FF;">void </span>').replace(/(int )/g, '<span style="color: #2DA8FF;">int </span>').replace(/(double )/g, '<span style="color: #2DA8FF;">double </span>').replace(/(short )/g, '<span style="color: #2DA8FF;">short </span>').replace(/(long )/g, '<span style="color: #2DA8FF;">long </span>').replace(/(char )/g, '<span style="color: #2DA8FF;">char </span>').replace(/(module )/g, '<span style="color: #2DA8FF;">module </span>').replace(/(endmodule)/g, '<span style="color: #2DA8FF;">endmodule</span>').replace(/(always)/g, '<span style="color: #2DA8FF;">always</span>').replace(/(input )/g, '<span style="color: #2DA8FF;">input </span>').replace(/(output )/g, '<span style="color: #2DA8FF;">output </span>').replace(/(inout )/g, '<span style="color: #2DA8FF;">inout </span>').replace(/(reg )/g, '<span style="color: #2DA8FF;">reg </span>').replace(/(wire )/g, '<span style="color: #2DA8FF;">wire </span>').replace(/(<=)/g, '<span style="color: #FF2EB3;"><=</span>').replace(/(begin)/g, '<span style="color: #FF2EB3;"> begin</span>').replace(/(end)/g, '<span style="color: #FF2EB3;">end</span>').replace(/(#include )/g, '<span style="color: #6B6B6B;">#include </span>').replace(/\/\/(.*)/g, '<span style="color: #1C9E54;">//$1</span>').replace(/\/\*([\s\S]*)\*\//g, '<span style="color: #1C9E54;">/*$1*/</span>');
                text += '\n<span style="font-size: .7em; text-decoration: underline;">This program code is ' + text.split('\n').length.toString() + ' line.</span>';
              } else {
                text = text.replace(/(^|\n)p:(.*)/g, '<p>$2 </p>').replace(/script:(.*)\:script/g, '<script>$1</script>').replace(/style:(.*)\/style/g, '<style>$1</style>').replace(/color\[(.*)\]:(.*)\:color/g, '<span style="color: $1;">$2</span>').replace(/font\[size=([0-9]+)\]:(.*):font/g, '<span style="font-size: $1px;">$2</span>');
                if (text.match(/(https?:\/\/[^$ \n<>]+)/)) {
                  text = text.replace(/(https?:\/\/[^$ \n<>]+)/g, '<a href="$1" target="_blank">' + decodeURIComponent(text) + '</a>');
                }
              }
            }
          }
          return socket.emit('message', {
            type: type ? type : 'send',
            name: name,
            text: text,
            color: color,
            data: data
          });
        };
        window.send_easy = function(text) {
          var color, name;
          name = VM.postform.name();
          color = VM.postform.color();
          return send(name, text, color);
        };
        return window.upload = function(file, type) {
          var reader;
          reader = new FileReader();
          reader.onload = function(event) {
            var data;
            data = event.target.result;
            switch (type) {
              case 'icon':
                if (file.name.match(/^.*.png/)) {

                } else {
                  alert('アイコンファイルはpng形式しか設定できません');
                }
                break;
              default:
                socket.emit('upload', {
                  type: 'file',
                  file: data,
                  name: file.name
                });
                send_easy(location.href + 'file/' + encodeURIComponent(file.name));
                break;
            }
          };
          return reader.readAsBinaryString(file);
        };
      });
    }).call(this);
    (function() {
      $('upload-state').draggable();
      $('#post-form').draggable({
        start: function(event) {
          $('main form#post-form > header').css('background', '#32ff9b');
          $('main form#post-form').css('border', '1px solid #32ff9b');
          return $('main form#post-form').css('height', '');
        },
        stop: function(event) {
          $('main form#post-form > header').css('background', '#ff3257');
          $('main form#post-form').css('border', '1px solid #ff3257');
          return $('main form#post-form').css('height', '');
        }
      }).css('position', '').on('mousemove', function() {
        if (localStorage.getItem('postform-position')) {
          return localStorage.setItem('postform-position', JSON.stringify({
            X: $('#post-form').position().left,
            Y: $('#post-form').position().top
          }));
        }
      });
      $('form').on('submit', function() {
        var color, name, text;
        name = VM.postform.name();
        text = $(document.querySelector('#post-form > textarea')).val();
        color = VM.postform.color();
        send(name, text, color);
        return $('main form#post-form > textarea').val('').focus();
      });
      if (localStorage.getItem('postform-position')) {
        $('#post-form').css('left', JSON.parse(localStorage.getItem('postform-position')).X).css('top', JSON.parse(localStorage.getItem('postform-position')).Y).css('bottom', 'auto');
        return false;
      }
    }).call(this);
    (function() {
      shortcut.add('Ctrl+Enter', function() {
        return $('#post-form').submit();
      });
      return shortcut.add('Ctrl+R', function() {
        if (localStorage.getItem('postform-position')) {
          localStorage.removeItem('postform-position');
          return WebNotify('Info', '投稿フォームの固定を解除しました。', '/icon/info.png', 5000);
        } else {
          localStorage.setItem('postform-position', JSON.stringify({
            X: $('#post-form').position().left,
            Y: $('#post-form').position().top
          }));
          return WebNotify('Info', '投稿フォームを固定しました。', '/icon/info.png', 5000);
        }
      });
    }).call(this);
    return (function() {
      var is_visible;
      is_visible = false;
      $(document.querySelector('#menu')).on('click', function() {
        if (!is_visible) {
          is_visible = true;
          return $(this).css({
            overflow: 'visible',
            background: 'rgba(255, 255, 255, .3)',
            border: '1px solid rgba(0, 0, 0, .5)'
          });
        } else {
          is_visible = false;
          return $(this).css({
            overflow: 'hidden',
            background: '',
            border: ''
          });
        }
      });
      return $(document.querySelectorAll('#menu a')).click(function() {
        return false;
      });
    }).call(this);
  });

}).call(this);

//# sourceMappingURL=index.js.map
